{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api-keys": {
      "post": {
        "operationId": "ApiKeyController_createApiKey",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API key created"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Create new API key",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api-keys/create-client-key": {
      "post": {
        "operationId": "ApiKeyController_createClientKey",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientKeyCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client key created"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Create new Client key",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/api-keys/verify-client-key": {
      "get": {
        "operationId": "ApiKeyController_verifyClientKey",
        "parameters": [
          {
            "name": "clientKey",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "tags": [
          "API Keys"
        ]
      }
    },
    "/integrators": {
      "get": {
        "description": "Retrieves a list of all integrators in the system",
        "operationId": "IntegratorController_getIntegrators",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Integrators retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratorResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Get all integrators",
        "tags": [
          "Integrators"
        ]
      },
      "post": {
        "description": "Creates a new integrator entry",
        "operationId": "IntegratorController_createIntegrator",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegratorCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integrator created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratorResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegratorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Create a new integrator",
        "tags": [
          "Integrators"
        ]
      }
    },
    "/wallets": {
      "post": {
        "description": "Creates a new wallet in the tenant sub-organization. If the sub-organization does not exist, it will be created automatically along with a master wallet. You can specify accounts with full parameters or use addressFormats for simplified creation.",
        "operationId": "WalletsController_createWallet",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Wallet creation parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/WalletResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Wallet created successfully"
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (INTEGRATOR scope required)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Create a new wallet",
        "tags": [
          "Wallets"
        ]
      },
      "get": {
        "description": "Retrieves a paginated list of all wallets belonging to the tenant sub-organization.",
        "operationId": "WalletsController_listWallets",
        "parameters": [
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "description": "Pagination cursor for the next page",
            "schema": {
              "example": "cursor-abc123",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of wallets to return (default: 20)",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "integratorId",
            "required": false,
            "in": "query",
            "description": "Integrator ID (required for ADMIN scope)",
            "schema": {
              "example": "uuid-integrator-id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/WalletListResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (INTEGRATOR scope required)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "List all wallets",
        "tags": [
          "Wallets"
        ]
      }
    },
    "/wallets/{walletId}": {
      "get": {
        "description": "Retrieves detailed information about a specific wallet including all addresses.",
        "operationId": "WalletsController_getWallet",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "description": "Turnkey wallet ID",
            "schema": {
              "example": "wallet-abc123def456",
              "type": "string"
            }
          },
          {
            "name": "integratorId",
            "required": false,
            "in": "query",
            "description": "Integrator ID (required for ADMIN scope)",
            "schema": {
              "example": "uuid-integrator-id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/WalletResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (INTEGRATOR scope required)"
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get wallet details",
        "tags": [
          "Wallets"
        ]
      }
    },
    "/wallets/{walletId}/addresses": {
      "get": {
        "description": "Retrieves all addresses (accounts) associated with a specific wallet.",
        "operationId": "WalletsController_getWalletAddresses",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "description": "Turnkey wallet ID",
            "schema": {
              "example": "wallet-abc123def456",
              "type": "string"
            }
          },
          {
            "name": "integratorId",
            "required": false,
            "in": "query",
            "description": "Integrator ID (required for ADMIN scope)",
            "schema": {
              "example": "uuid-integrator-id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WalletAccountResponseDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (INTEGRATOR scope required)"
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get all addresses for a wallet",
        "tags": [
          "Wallets"
        ]
      },
      "post": {
        "description": "Creates new addresses in an existing wallet. You can specify accounts with full parameters or use addressFormats for simplified creation.",
        "operationId": "WalletsController_createWalletAddresses",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "description": "Turnkey wallet ID",
            "schema": {
              "example": "wallet-abc123def456",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Address creation parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletAccountsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WalletAccountResponseDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Wallet addresses created successfully"
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (INTEGRATOR scope required)"
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Create wallet addresses (generate addresses)",
        "tags": [
          "Wallets"
        ]
      }
    },
    "/wallets/{walletId}/addresses/{addressId}": {
      "get": {
        "description": "Retrieves details of a specific address (account) by its ID.",
        "operationId": "WalletsController_getWalletAddress",
        "parameters": [
          {
            "name": "walletId",
            "required": true,
            "in": "path",
            "description": "Turnkey wallet ID",
            "schema": {
              "example": "wallet-abc123def456",
              "type": "string"
            }
          },
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "description": "Wallet account ID (address ID)",
            "schema": {
              "example": "account-xyz789",
              "type": "string"
            }
          },
          {
            "name": "integratorId",
            "required": false,
            "in": "query",
            "description": "Integrator ID (required for ADMIN scope)",
            "schema": {
              "example": "uuid-integrator-id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/WalletAccountResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (INTEGRATOR scope required)"
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get a specific address",
        "tags": [
          "Wallets"
        ]
      }
    },
    "/directory/v1": {
      "get": {
        "operationId": "DirectoryController_getDirectoryData",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Directory data"
          },
          "429": {
            "description": "Too Many Requests"
          }
        },
        "summary": "Get the Directory data",
        "tags": [
          "Directory"
        ]
      }
    },
    "/miniapp": {
      "get": {
        "operationId": "MiniAppController_getAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Mini apps retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MiniAppResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all mini apps",
        "tags": [
          "MiniApp"
        ]
      },
      "post": {
        "description": "Creates a new mini app with support for different types including the new 'onboarding' type.\n    \n    **Supported Types:**\n    - Swap\n    - Stake  \n    - Transfer Native\n    - Tips\n    - Native Cross-Chain\n    - **onboarding** (NEW)\n    \n    **For 'onboarding' type mini-apps, special validation logic is applied:**\n    \n    1. **Required Fields:** twitter_handle and id_x are mandatory\n    2. **Sequential Process (ALWAYS both steps):**\n       \n       **STEP 1 - beta_whitelist table:**\n       - If user exists: updates onboarded=true, id_mini_app=mini_app_id\n       - If user doesn't exist: creates new entry with whitelisted=false, onboarded=true, id_mini_app=mini_app_id\n       \n       **STEP 2 - users_onboarded table:**\n       - If user exists: updates id_mini_app=mini_app_id, id_user, id_x\n       - If user doesn't exist: creates new entry with twitter_handle, id_mini_app, id_user, id_x\n    \n    3. **Database Updates (ALWAYS both tables):**\n       - beta_whitelist: always touched (update or insert)\n       - users_onboarded: always touched (update or insert)",
        "operationId": "MiniAppController_createMiniApp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Mini app creation payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MiniAppCreateDto"
              },
              "examples": {
                "swap-miniapp": {
                  "summary": "Standard Swap Mini-App",
                  "description": "Example of creating a standard swap mini-app",
                  "value": {
                    "id_user": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                    "description": "My awesome swap mini-app for AVAX/USDC",
                    "wallet_address": "0x123abc456def789012345678901234567890abcd",
                    "metadata": {
                      "name": "AVAX/USDC Swap",
                      "version": "1.0.0",
                      "settings": {
                        "slippage": 0.5,
                        "gas_limit": 300000
                      }
                    },
                    "contract_address": "0x456def789abc012345678901234567890123cdef",
                    "type": "Swap",
                    "protocol": "traderjoe",
                    "blockchain_network": 43114,
                    "is_active": true
                  }
                },
                "onboarding-miniapp": {
                  "summary": "Onboarding Mini-App (NEW)",
                  "description": "Example of creating an onboarding mini-app with required Twitter fields",
                  "value": {
                    "id_user": "a47bc20c-68dd-5482-b678-1f13c3d4e590",
                    "description": "User onboarding mini-app for new Twitter users",
                    "wallet_address": "0x789ghi012jkl345mno678pqr901stu234vwx567yz",
                    "metadata": {
                      "name": "Twitter Onboarding",
                      "version": "1.0.0",
                      "onboarding_flow": "twitter_auth",
                      "settings": {
                        "auto_create_wallet": true,
                        "welcome_bonus": 10
                      }
                    },
                    "contract_address": "0x012jkl345mno678pqr901stu234vwx567yz890abc",
                    "type": "onboarding",
                    "protocol": "traderjoe",
                    "blockchain_network": 43114,
                    "twitter_handle": "johndoe",
                    "id_x": "123456789",
                    "is_active": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Mini app created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Mini app created"
                    },
                    "data": {
                      "$ref": "#/components/schemas/MiniAppResponseDto"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 201
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "path": {
                      "type": "string",
                      "example": "mini-apps"
                    }
                  }
                },
                "examples": {
                  "swap-type": {
                    "summary": "Swap type mini-app",
                    "value": {
                      "success": true,
                      "message": "Mini app created",
                      "data": {
                        "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                        "description": "My swap mini-app",
                        "type": "Swap",
                        "wallet_address": "0x123abc456def",
                        "contract_address": "0x456def789abc",
                        "protocol": "traderjoe",
                        "blockchain_network": 43114,
                        "is_active": true,
                        "created_at": "2025-01-01T00:00:00Z"
                      },
                      "statusCode": 201,
                      "timestamp": "2025-01-01T00:00:00Z",
                      "path": "mini-apps"
                    }
                  },
                  "onboarding-type": {
                    "summary": "Onboarding type mini-app (NEW)",
                    "value": {
                      "success": true,
                      "message": "Mini app created",
                      "data": {
                        "id": "a47bc20c-68dd-5482-b678-1f13c3d4e590",
                        "description": "User onboarding mini-app",
                        "type": "onboarding",
                        "wallet_address": "0x789ghi012jkl",
                        "contract_address": "0x012jkl345mno",
                        "protocol": "traderjoe",
                        "blockchain_network": 43114,
                        "is_active": true,
                        "created_at": "2025-01-01T00:00:00Z"
                      },
                      "statusCode": 201,
                      "timestamp": "2025-01-01T00:00:00Z",
                      "path": "mini-apps"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Various error scenarios for mini-app creation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "path": {
                      "type": "string",
                      "example": "mini-apps"
                    }
                  }
                },
                "examples": {
                  "missing-onboarding-fields": {
                    "summary": "Missing required fields for onboarding type",
                    "value": {
                      "success": false,
                      "message": "twitter_handle and id_x are required for onboarding type mini-apps",
                      "statusCode": 400,
                      "timestamp": "2025-01-01T00:00:00Z",
                      "path": "mini-apps"
                    }
                  },
                  "user-validation-failed": {
                    "summary": "User validation failed",
                    "value": {
                      "success": false,
                      "message": "User validation failed",
                      "statusCode": 400,
                      "timestamp": "2025-01-01T00:00:00Z",
                      "path": "mini-apps"
                    }
                  },
                  "general-creation-failed": {
                    "summary": "General creation failed",
                    "value": {
                      "success": false,
                      "message": "Creation failed",
                      "statusCode": 400,
                      "timestamp": "2025-01-01T00:00:00Z",
                      "path": "mini-apps"
                    }
                  },
                  "invalid-input": {
                    "summary": "Invalid input validation",
                    "value": {
                      "success": false,
                      "message": "Validation failed: description is required",
                      "statusCode": 400,
                      "timestamp": "2025-01-01T00:00:00Z",
                      "path": "mini-apps"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create a new mini app",
        "tags": [
          "MiniApp"
        ]
      }
    },
    "/miniapp/{id}": {
      "get": {
        "operationId": "MiniAppController_getById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Mini app UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mini app retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MiniAppResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get mini app by ID",
        "tags": [
          "MiniApp"
        ]
      },
      "patch": {
        "description": "Updates an existing mini app with partial data. Only provided fields will be updated. \n  ",
        "operationId": "MiniAppController_updateMiniApp",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Mini app UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Mini app update payload (partial)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MiniAppUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mini app updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MiniAppResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data"
          },
          "404": {
            "description": "Mini app not found"
          }
        },
        "summary": "Update a mini app",
        "tags": [
          "MiniApp"
        ]
      }
    },
    "/miniapp/{miniAppId}/metadata": {
      "get": {
        "operationId": "MiniAppController_getMetadataById",
        "parameters": [
          {
            "name": "miniAppId",
            "required": true,
            "in": "path",
            "description": "The ID of the mini app",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mini app retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get raw metadata by ID",
        "tags": [
          "MiniApp"
        ]
      }
    },
    "/miniapp/{id}/fees-withdrawal": {
      "patch": {
        "operationId": "MiniAppController_registerFeesWithdrawal",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Mini app UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeesWithdrawalCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Fees withdrawal registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Fees withdrawal registered"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 200
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "path": {
                      "type": "string",
                      "example": "mini-apps/{id}/fees-withdrawal"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data"
          },
          "404": {
            "description": "Mini app not found"
          }
        },
        "summary": "Register fees withdrawal for mini app",
        "tags": [
          "MiniApp"
        ]
      }
    },
    "/applications": {
      "get": {
        "description": "Retrieves a list of all applications in the system",
        "operationId": "ApplicationController_getApplications",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "maximum": 100000,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiPaginatedResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ApplicationResponseDto"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/PaginationMeta"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get all applications",
        "tags": [
          "Applications"
        ]
      },
      "post": {
        "description": "Creates a new application entry",
        "operationId": "ApplicationController_createApplication",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ApplicationResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Create a new application",
        "tags": [
          "Applications"
        ]
      }
    },
    "/applications/{state}/state": {
      "get": {
        "description": "Retrieves applications filtered by their current state",
        "operationId": "ApplicationController_getApplicationsByState",
        "parameters": [
          {
            "name": "state",
            "required": true,
            "in": "path",
            "description": "State to filter applications by",
            "schema": {
              "example": "pending",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "maximum": 100000,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Applications retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get applications by state",
        "tags": [
          "Applications"
        ]
      }
    },
    "/applications/{id}": {
      "get": {
        "description": "Retrieves a single application by its ID",
        "operationId": "ApplicationController_getApplicationById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the application",
            "schema": {
              "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get application by ID",
        "tags": [
          "Applications"
        ]
      }
    },
    "/gtm/swap": {
      "post": {
        "operationId": "GtmController_processSwap",
        "parameters": [
          {
            "name": "protocol",
            "required": false,
            "in": "query",
            "description": "DEX protocol to use for token operations",
            "schema": {
              "$ref": "#/components/schemas/SwapProtocol"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain ID for the blockchain network",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "kolRouterAddress",
            "required": true,
            "in": "query",
            "description": "The address of the Kol Router contract you want to use to make the swap",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "description": "The address of the user who wishes to make the swap",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromToken",
            "required": true,
            "in": "query",
            "description": "Token to swap from (address or symbol)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toToken",
            "required": true,
            "in": "query",
            "description": "Token to swap to (address or symbol)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "required": false,
            "in": "query",
            "description": "Amount to be swapped (in decimals)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "slippage",
            "required": false,
            "in": "query",
            "description": "Maximum slippage allowed (in percentage)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Swap data based on query parameters"
          }
        },
        "summary": "Get swap information",
        "tags": [
          "GTM"
        ]
      }
    },
    "/gtm/get-token-list": {
      "get": {
        "operationId": "GtmController_getTokenList",
        "parameters": [
          {
            "name": "protocol",
            "required": false,
            "in": "query",
            "description": "DEX protocol to use for token operations",
            "schema": {
              "$ref": "#/components/schemas/SwapProtocol"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain ID for the blockchain network",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token list based on query parameters"
          }
        },
        "summary": "Get token list for specific protocol and chainId",
        "tags": [
          "GTM"
        ]
      }
    },
    "/gtm/metrics": {
      "get": {
        "description": "Retrieves all the metrics for all the mini apps of a KOL",
        "operationId": "GtmController_getKolMetricsByAddress",
        "parameters": [
          {
            "name": "kolAddress",
            "required": true,
            "in": "query",
            "description": "The Kol address for which you want to fetch metrics",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "miniAppId",
            "required": false,
            "in": "query",
            "description": "Mini App ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "timeRange",
            "required": false,
            "in": "query",
            "description": "Time range for the metrics",
            "schema": {
              "$ref": "#/components/schemas/TimeRange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/KolMetricsResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get KOL metrics by ADDRESS",
        "tags": [
          "GTM"
        ]
      }
    },
    "/gtm/mini-apps-with-onchain-metrics": {
      "get": {
        "description": "Retrieves all mini apps and onchain metrics (fee and swap volume) for a specific KOL",
        "operationId": "GtmController_getKolOnchainMetricsByAddress",
        "parameters": [
          {
            "name": "kolAddress",
            "required": true,
            "in": "query",
            "description": "The Kol address for which you want to fetch metrics",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "miniAppId",
            "required": false,
            "in": "query",
            "description": "Mini App ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "timeRange",
            "required": false,
            "in": "query",
            "description": "Time range for the metrics",
            "schema": {
              "$ref": "#/components/schemas/TimeRange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/KolOnchainMetricsResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get KOL mini-apps and onchain metrics by ADDRESS",
        "tags": [
          "GTM"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Retrieves a list of all users in the system.",
        "operationId": "UsersController_getUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get all users",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "description": "Creates a user with username and address. Used as fallback.",
        "operationId": "UsersController_createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Create a new user (legacy)",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Retrieves a user by their unique ID.",
        "operationId": "UsersController_getUserById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID of the user to retrieve",
            "schema": {
              "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get user by ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/find-or-create": {
      "post": {
        "description": "Finds user by address or creates a new one if it doesn't exist. Main endpoint for Sherry Chat authentication.",
        "operationId": "UsersController_findOrCreateUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFindOrCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFindOrCreateResponseDto"
                },
                "example": {
                  "data": {
                    "user": {
                      "id": "uuid-here",
                      "username": "john_doe",
                      "address": "0x123...",
                      "email": null,
                      "created_at": "2025-01-01T00:00:00Z",
                      "updated_at": "2025-01-01T00:00:00Z"
                    },
                    "user_onboarded": {
                      "id": "uuid-onboarded",
                      "id_mini_app_onboarding": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                      "twitter_handle": "ojolote",
                      "id_mini_app": null,
                      "id_user": null,
                      "id_x": null,
                      "created_at": "2025-01-01T00:00:00Z",
                      "updated_at": null
                    },
                    "created": false,
                    "on_whitelist": true,
                    "disabled": false,
                    "onboarded": true,
                    "users_onboarded": 100
                  },
                  "message": "User found successfully",
                  "statusCode": 200,
                  "path": "users/find-or-create"
                }
              }
            }
          },
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFindOrCreateResponseDto"
                },
                "example": {
                  "data": {
                    "user": {
                      "id": "uuid-here",
                      "username": "jane_doe",
                      "address": "0x456...",
                      "email": null,
                      "created_at": "2025-01-01T00:00:00Z",
                      "updated_at": "2025-01-01T00:00:00Z"
                    },
                    "user_onboarded": {
                      "id": "uuid-onboarded",
                      "id_mini_app_onboarding": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                      "twitter_handle": "ojolote",
                      "id_mini_app": null,
                      "id_user": null,
                      "id_x": null,
                      "created_at": "2025-01-01T00:00:00Z",
                      "updated_at": null
                    },
                    "created": true,
                    "on_whitelist": true,
                    "disabled": false,
                    "onboarded": true,
                    "users_onboarded": 100
                  },
                  "message": "User created successfully",
                  "statusCode": 201,
                  "path": "users/find-or-create"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Address already exists with different username"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Find or create user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{username}/mini-apps": {
      "get": {
        "description": "Retrieves all mini-apps created by the specified user.",
        "operationId": "UsersController_getUserMiniApps",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "description": "The username of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mini-apps retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MiniAppResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get mini-apps for a user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/by-address/{address}": {
      "get": {
        "description": "Retrieves a user by their Ethereum wallet address.",
        "operationId": "UsersController_getUserByAddress",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Ethereum wallet address",
            "schema": {
              "example": "0x123abc456def789012345678901234567890abcd",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get user by wallet address",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/by-username/{username}": {
      "get": {
        "description": "Retrieves a user by their Twitter username.",
        "operationId": "UsersController_getUserByUsername",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "description": "Twitter username (without @)",
            "schema": {
              "example": "francocarballa",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get user by Twitter username",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/by-address/{address}/mini-apps": {
      "get": {
        "description": "Retrieves all mini-apps created by the user with the specified wallet address.",
        "operationId": "UsersController_getUserMiniAppsByAddress",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Ethereum wallet address",
            "schema": {
              "example": "0x123abc456def789012345678901234567890abcd",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mini-apps retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MiniAppResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get mini-apps for a user by address",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/by-address/{address}/fee-balances": {
      "get": {
        "description": "Retrieves fee balances from all swap mini-apps for a KOL using multicall3 for efficient batching.",
        "operationId": "UsersController_getKolFeeBalancesByAddress",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "KOL Ethereum wallet address",
            "schema": {
              "example": "0x123abc456def789012345678901234567890abcd",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fee balances retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KolFeeBalancesResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get KOL fee balances for all mini-apps by address",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/webhook/onboarding": {
      "post": {
        "description": "\nProcesses onboarding events from smart contract interactions.\n\n**Purpose**:\n- Called when a user interacts with an onboarding mini-app contract\n- Creates or updates entry in `users_onboarded` table\n- Increments `users_onboarded` counter in `beta_whitelist`\n\n**Flow**:\n1. Contract emits event with `twitter_handle` and mini-app ID\n2. Webhook listener calls this endpoint\n3. If user exists in `users_onboarded`: updates `id_mini_app_onboarding`\n4. If user doesn't exist: creates new entry with these fields\n5. Increments `users_onboarded` count in `beta_whitelist` for the user who owns the mini-app\n  ",
        "operationId": "UsersController_processOnboardingWebhook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPayloadDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/UserOnboardedDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Onboarding webhook processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Webhook processed successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserOnboardedDto"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 201
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "path": {
                      "type": "string",
                      "example": "users/webhook/onboarding"
                    }
                  }
                },
                "examples": {
                  "new-user": {
                    "summary": "New user onboarded",
                    "value": {
                      "success": true,
                      "message": "Webhook processed successfully",
                      "data": {
                        "id": "uuid-here",
                        "twitter_handle": "johndoe",
                        "id_mini_app_onboarding": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                        "id_mini_app": null,
                        "id_user": null,
                        "id_x": null,
                        "created_at": "2025-01-01T00:00:00Z",
                        "updated_at": "2025-01-01T00:00:00Z"
                      },
                      "statusCode": 201,
                      "timestamp": "2025-01-01T00:00:00Z",
                      "path": "users/webhook/onboarding"
                    }
                  },
                  "existing-user": {
                    "summary": "Existing user updated",
                    "value": {
                      "success": true,
                      "message": "Webhook processed successfully",
                      "data": {
                        "id": "uuid-here",
                        "twitter_handle": "janedoe",
                        "id_mini_app_onboarding": "a47bc20c-68dd-5482-b678-1f13c3d4e590",
                        "id_mini_app": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                        "id_user": "user-uuid-here",
                        "id_x": "123456789",
                        "created_at": "2025-01-01T00:00:00Z",
                        "updated_at": "2025-01-01T00:00:00Z"
                      },
                      "statusCode": 201,
                      "timestamp": "2025-01-01T00:00:00Z",
                      "path": "users/webhook/onboarding"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid webhook data or processing failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "path": {
                      "type": "string",
                      "example": "users/webhook/onboarding"
                    }
                  }
                },
                "examples": {
                  "validation-error": {
                    "summary": "Validation failed",
                    "value": {
                      "success": false,
                      "message": "Validation failed: twitter_handle is required",
                      "statusCode": 400,
                      "timestamp": "2025-01-01T00:00:00Z",
                      "path": "users/webhook/onboarding"
                    }
                  },
                  "processing-error": {
                    "summary": "Processing failed",
                    "value": {
                      "success": false,
                      "message": "Unexpected error processing webhook",
                      "statusCode": 400,
                      "timestamp": "2025-01-01T00:00:00Z",
                      "path": "users/webhook/onboarding"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Process onboarding webhook from contract event",
        "tags": [
          "Users"
        ]
      }
    },
    "/indexing/events": {
      "post": {
        "description": "Creates new event entries for blockchain indexing",
        "operationId": "EventsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponseDto"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/EventsResponseDto"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Index events",
        "tags": [
          "Indexing - Events"
        ]
      }
    },
    "/metadata/types": {
      "get": {
        "description": "Returns a list of all available application types that can generate metadata",
        "operationId": "MetadataController_getSupportedTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of supported application types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "swap",
                    "staking",
                    "crosschain_transfer",
                    "transfer",
                    "crosschain_bridge"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get all supported application types",
        "tags": [
          "Metadata"
        ]
      }
    },
    "/metadata/swap": {
      "post": {
        "description": "Creates metadata configuration for a token swap application. Currently supports LFJ and Pangolin protocols.",
        "operationId": "MetadataController_generateSwapMetadata",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Parameters for generating swap metadata",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwapMetadataDto"
              },
              "examples": {
                "LFJ Swap": {
                  "value": {
                    "protocol": "lfj",
                    "chainName": "avalanche",
                    "fromToken": "AVAX",
                    "toToken": "JOE",
                    "routerAddress": "0xb00D916688FEE4aB6646994104E1441446947fc9",
                    "slippageTolerance": 0.5
                  },
                  "description": "Swap AVAX to JOE using LFJ protocol on Avalanche"
                },
                "Pangolin Swap": {
                  "value": {
                    "protocol": "pangolin",
                    "chainName": "avalanche",
                    "fromToken": "AVAX",
                    "toToken": "PNG",
                    "routerAddress": "0xb00D916688FEE4aB6646994104E1441446947fc9",
                    "slippageTolerance": 0.5
                  },
                  "description": "Swap AVAX to PNG using Pangolin protocol on Avalanche"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Swap metadata generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Generated metadata object containing all swap configuration"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to generate metadata"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Generate metadata for Swap application",
        "tags": [
          "Metadata"
        ]
      }
    },
    "/metadata/staking": {
      "post": {
        "description": "Creates metadata configuration for a staking application. Currently not implemented.",
        "operationId": "MetadataController_generateStakingMetadata",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Staking metadata generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "metadata": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented - Staking metadata generation is not yet available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 501
                    },
                    "message": {
                      "type": "string",
                      "example": "Staking metadata generation not implemented"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Generate metadata for Staking application",
        "tags": [
          "Metadata"
        ]
      }
    },
    "/metadata/crosschain-transfer": {
      "post": {
        "description": "Creates metadata configuration for transferring native tokens across different blockchain networks. Converts native currency from source chain to native currency on destination chain (e.g., AVAX → ETH, AVAX → MATIC).",
        "operationId": "MetadataController_generateCrosschainTransferMetadata",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Parameters for generating crosschain native token transfer metadata",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossChainAppDto"
              },
              "examples": {
                "Transfer AVAX to Ethereum (receive ETH)": {
                  "value": {
                    "title": "Transfer AVAX to ETH",
                    "description": "Transfer AVAX from Avalanche and receive ETH on Ethereum",
                    "icon": "https://example.com/transfer-icon.png",
                    "url": "https://example.com/transfer",
                    "sourceChainId": 43114,
                    "destinationChainId": 1,
                    "address": "0xb00D916688FEE4aB6646994104E1441446947fc9"
                  },
                  "description": "Send AVAX from Avalanche (43114) and receive ETH on Ethereum (1)"
                },
                "Transfer AVAX to Polygon (receive MATIC)": {
                  "value": {
                    "title": "Transfer AVAX to MATIC",
                    "description": "Transfer AVAX from Avalanche and receive MATIC on Polygon",
                    "icon": "https://example.com/transfer-icon.png",
                    "url": "https://example.com/transfer-avax",
                    "sourceChainId": 43114,
                    "destinationChainId": 137,
                    "address": "0xb00D916688FEE4aB6646994104E1441446947fc9"
                  },
                  "description": "Send AVAX from Avalanche (43114) and receive MATIC on Polygon (137)"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Crosschain transfer metadata generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Generated metadata for crosschain transfer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters provided"
          },
          "500": {
            "description": "Internal Server Error - Failed to generate metadata"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Generate metadata for Crosschain Transfer application",
        "tags": [
          "Metadata"
        ]
      }
    },
    "/metadata/transfer-native": {
      "post": {
        "description": "Creates metadata configuration for transferring native tokens (like AVAX, ETH, MATIC) on a single blockchain network.",
        "operationId": "MetadataController_generateTransferNativeMetadata",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Parameters for generating native token transfer metadata",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferMetadataDto"
              },
              "examples": {
                "AVAX Transfer on Avalanche": {
                  "value": {
                    "title": "Transfer AVAX",
                    "description": "Send AVAX to another address on Avalanche network",
                    "icon": "https://example.com/avax-icon.png",
                    "url": "https://example.com/transfer",
                    "address": "0xb00D916688FEE4aB6646994104E1441446947fc9",
                    "chainId": 43114
                  },
                  "description": "Transfer AVAX on Avalanche C-Chain (43114)"
                },
                "ETH Transfer on Ethereum": {
                  "value": {
                    "title": "Transfer ETH",
                    "description": "Send ETH to another address on Ethereum network",
                    "icon": "https://example.com/eth-icon.png",
                    "url": "https://example.com/transfer-eth",
                    "address": "0xb00D916688FEE4aB6646994104E1441446947fc9",
                    "chainId": 1
                  },
                  "description": "Transfer ETH on Ethereum mainnet (1)"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Native token transfer metadata generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Generated metadata for native token transfer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters provided"
          },
          "500": {
            "description": "Internal Server Error - Failed to generate metadata"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Generate metadata for Native Token Transfer application",
        "tags": [
          "Metadata"
        ]
      }
    },
    "/metadata/crosschain-bridge": {
      "post": {
        "description": "Creates metadata configuration for bridging assets between different blockchain networks.",
        "operationId": "MetadataController_generateCrosschainBridgeMetadata",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Parameters for generating crosschain bridge metadata",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossChainAppDto"
              },
              "examples": {
                "Bridge from Avalanche to Arbitrum": {
                  "value": {
                    "title": "Bridge USDC",
                    "description": "Bridge USDC from Avalanche to Arbitrum",
                    "icon": "https://example.com/usdc-icon.png",
                    "url": "https://example.com/bridge",
                    "sourceChainId": 43114,
                    "destinationChainId": 42161,
                    "address": "0xb00D916688FEE4aB6646994104E1441446947fc9"
                  },
                  "description": "Bridge USDC from Avalanche (43114) to Arbitrum (42161)"
                },
                "Bridge from Ethereum to Polygon": {
                  "value": {
                    "title": "Bridge ETH",
                    "description": "Bridge ETH from Ethereum to Polygon",
                    "icon": "https://example.com/eth-icon.png",
                    "url": "https://example.com/bridge-eth",
                    "sourceChainId": 1,
                    "destinationChainId": 137,
                    "address": "0xb00D916688FEE4aB6646994104E1441446947fc9"
                  },
                  "description": "Bridge ETH from Ethereum (1) to Polygon (137)"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Crosschain bridge metadata generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Generated metadata for crosschain bridge operation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid bridge parameters"
          },
          "500": {
            "description": "Internal Server Error - Failed to generate bridge metadata"
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Generate metadata for Crosschain Bridge application",
        "tags": [
          "Metadata"
        ]
      }
    },
    "/tokens/{chain}/{protocol}": {
      "get": {
        "description": "Returns the token list for a given protocol on a specific chain. Use 'all' for the chain parameter to fetch tokens on every supported chain.",
        "operationId": "TokensController_findTokens",
        "parameters": [
          {
            "name": "chain",
            "required": true,
            "in": "path",
            "description": "Chain identifier. Accepts numeric chain IDs (e.g. '43114'), chain slugs (e.g. 'avalanche'), or 'all' to fetch every supported chain.",
            "schema": {
              "example": "all",
              "type": "string"
            }
          },
          {
            "name": "protocol",
            "required": true,
            "in": "path",
            "description": "DEX protocol identifier (e.g. lfj, pangolin).",
            "schema": {
              "example": "lfj",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tokens retrieved successfully."
          },
          "400": {
            "description": "Invalid protocol or chain parameter."
          },
          "500": {
            "description": "Unexpected error fetching tokens."
          }
        },
        "summary": "Retrieve protocol token list for a chain",
        "tags": [
          "Tokens"
        ]
      }
    },
    "/defi/lending/markets": {
      "get": {
        "description": "Retrieve all available lending markets with APYs, liquidity, and user-specific data if address provided",
        "operationId": "LendingController_getMarketsData",
        "parameters": [
          {
            "name": "userAddress",
            "required": false,
            "in": "query",
            "description": "User address to get personalized data (optional)",
            "schema": {
              "example": "0xb322E239E5A32724633A595b8f8657F9cbb307B2",
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain ID (43114 for Avalanche)",
            "schema": {
              "example": 43114,
              "type": "number",
              "enum": [
                43114,
                43113
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Markets data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketsDataResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefiErrorResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefiErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get AAVE markets data",
        "tags": [
          "DeFi - Lending (AAVE)"
        ]
      }
    },
    "/defi/lending/supply": {
      "post": {
        "description": "Prepare a transaction to supply assets to AAVE lending pool",
        "operationId": "LendingController_supplyAsset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupplyRequestDto"
              },
              "examples": {
                "supply-avax": {
                  "summary": "Supply AVAX",
                  "description": "Supply native AVAX to AAVE",
                  "value": {
                    "userAddress": "0xb322E239E5A32724633A595b8f8657F9cbb307B2",
                    "tokenAddress": "avax",
                    "amount": "0.1",
                    "chainId": 43114
                  }
                },
                "supply-usdc": {
                  "summary": "Supply USDC",
                  "description": "Supply USDC token to AAVE",
                  "value": {
                    "userAddress": "0xb322E239E5A32724633A595b8f8657F9cbb307B2",
                    "tokenAddress": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
                    "amount": "100",
                    "chainId": 43114
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Supply transaction prepared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefiErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Supply asset to AAVE",
        "tags": [
          "DeFi - Lending (AAVE)"
        ]
      }
    },
    "/defi/lending/positions": {
      "get": {
        "description": "Retrieve user supplies, borrows, and health factor from AAVE",
        "operationId": "LendingController_getUserPositions",
        "parameters": [
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "description": "User wallet address",
            "schema": {
              "example": "0xb322E239E5A32724633A595b8f8657F9cbb307B2",
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain ID (43114 for Avalanche)",
            "schema": {
              "example": 43114,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User positions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalSuppliedUsd": {
                      "type": "string",
                      "example": "1000.50"
                    },
                    "totalBorrowedUsd": {
                      "type": "string",
                      "example": "250.25"
                    },
                    "healthFactor": {
                      "type": "string",
                      "example": "2.5"
                    },
                    "supplies": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "symbol": {
                            "type": "string",
                            "example": "AVAX"
                          },
                          "amount": {
                            "type": "string",
                            "example": "10.5"
                          },
                          "amountUsd": {
                            "type": "string",
                            "example": "1000.50"
                          }
                        }
                      }
                    },
                    "borrows": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "symbol": {
                            "type": "string",
                            "example": "USDC"
                          },
                          "amount": {
                            "type": "string",
                            "example": "250.25"
                          },
                          "amountUsd": {
                            "type": "string",
                            "example": "250.25"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid user address or chain ID"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve user positions"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get user lending positions",
        "tags": [
          "DeFi - Lending (AAVE)"
        ]
      }
    },
    "/defi/lending/supply-avax": {
      "post": {
        "description": "Prepare a transaction to supply AVAX to AAVE lending pool",
        "operationId": "LendingController_supplyAvax",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userAddress": {
                    "type": "string",
                    "example": "0xb322E239E5A32724633A595b8f8657F9cbb307B2"
                  },
                  "amount": {
                    "type": "number",
                    "example": 0.1,
                    "description": "Amount of AVAX to supply"
                  },
                  "chainId": {
                    "type": "number",
                    "example": 43114,
                    "description": "Chain ID (43114 for Avalanche)"
                  }
                },
                "required": [
                  "userAddress",
                  "amount",
                  "chainId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Supply transaction prepared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "serializedTransaction": {
                      "type": "string"
                    },
                    "gasEstimation": {
                      "type": "object",
                      "properties": {
                        "gasLimit": {
                          "type": "string"
                        },
                        "estimatedCost": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid token address or amount"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to prepare supply transaction"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Supply AVAX to AAVE",
        "tags": [
          "DeFi - Lending (AAVE)"
        ]
      }
    },
    "/defi/lending/withdraw-avax": {
      "post": {
        "description": "Prepare a transaction to withdraw AVAX from AAVE lending pool",
        "operationId": "LendingController_withdrawAvax",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userAddress": {
                    "type": "string",
                    "example": "0xb322E239E5A32724633A595b8f8657F9cbb307B2"
                  },
                  "amount": {
                    "type": "number",
                    "example": 0.1,
                    "description": "Amount of AVAX to withdraw"
                  },
                  "chainId": {
                    "type": "number",
                    "example": 43114,
                    "description": "Chain ID (43114 for Avalanche)"
                  }
                },
                "required": [
                  "userAddress",
                  "amount",
                  "chainId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdraw transaction prepared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Withdraw transaction prepared successfully"
                    },
                    "serializedTransaction": {
                      "type": "string",
                      "example": "{\"to\":\"0x...\",\"data\":\"0x\",\"value\":\"0\"}"
                    },
                    "gasEstimation": {
                      "type": "object",
                      "properties": {
                        "gasLimit": {
                          "type": "string",
                          "example": "200000"
                        },
                        "estimatedCost": {
                          "type": "string",
                          "example": "0.01"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid amount or insufficient balance"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to prepare withdraw transaction"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Withdraw AVAX from AAVE",
        "tags": [
          "DeFi - Lending (AAVE)"
        ]
      }
    },
    "/defi/lending/my-avax-supply": {
      "get": {
        "description": "Get the amount of AVAX the user has supplied to AAVE. Supports Avalanche mainnet (43114) and Fuji testnet (43113)",
        "operationId": "LendingController_getMyAvaxSupply",
        "parameters": [
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "description": "User wallet address",
            "schema": {
              "example": "0xb322E239E5A32724633A595b8f8657F9cbb307B2",
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "query",
            "description": "Chain ID (43114 for Avalanche, 43113 for Fuji testnet)",
            "schema": {
              "enum": [
                43114,
                43113
              ],
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User AVAX supply retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "AVAX supply: 10.5"
                    },
                    "avaxSupply": {
                      "type": "string",
                      "example": "10.5"
                    }
                  },
                  "examples": {
                    "avalanche-mainnet": {
                      "summary": "Avalanche Mainnet (43114)",
                      "description": "Example response for Avalanche mainnet",
                      "value": {
                        "success": true,
                        "message": "AVAX supply: 10.5",
                        "avaxSupply": "10.5"
                      }
                    },
                    "fuji-testnet": {
                      "summary": "Fuji Testnet (43113)",
                      "description": "Example response for Fuji testnet",
                      "value": {
                        "success": true,
                        "message": "AVAX supply: 0.0",
                        "avaxSupply": "0.0"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid user address or chain ID"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve user supply data"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Get user AVAX supply",
        "tags": [
          "DeFi - Lending (AAVE)"
        ]
      }
    },
    "/defi/lending/health": {
      "get": {
        "description": "Check if the lending service is operational",
        "operationId": "LendingController_healthCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    },
                    "service": {
                      "type": "string",
                      "example": "lending"
                    },
                    "timestamp": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string",
                      "example": "DeFi Lending service is running!"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ],
        "summary": "Health check",
        "tags": [
          "DeFi - Lending (AAVE)"
        ]
      }
    }
  },
  "info": {
    "title": "Sherry API",
    "description": "Documentación de la Sherry API",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:4000/v1",
      "description": "Development server"
    },
    {
      "url": "https://api.sherry.social/v1",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Use this format: `ApiKey <your_api_key>`"
      }
    },
    "schemas": {
      "ApiKeyCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the API Key"
          },
          "description": {
            "type": "string",
            "description": "Description of the API key"
          },
          "scopes": {
            "type": "string",
            "description": "Scopes for the API Key",
            "enum": [
              "admin",
              "internal",
              "external",
              "integrator"
            ],
            "example": [
              "read",
              "write"
            ]
          }
        },
        "required": [
          "name",
          "description",
          "scopes"
        ]
      },
      "ClientKeyCreateDto": {
        "type": "object",
        "properties": {
          "id_integrator": {
            "type": "string",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "description": "Unique identifier for the integrator."
          },
          "name": {
            "type": "string",
            "description": "Name of the Client Key"
          },
          "description": {
            "type": "string",
            "description": "Description of the Client key"
          }
        },
        "required": [
          "id_integrator",
          "name",
          "description"
        ]
      },
      "IntegratorResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "description": "Unique identifier for the integrator (UUID)."
          },
          "name": {
            "type": "string",
            "example": "AvaLabs",
            "description": "Name of the integrator."
          },
          "email": {
            "type": "string",
            "example": "john@example.com",
            "description": "Email address of the integrator."
          },
          "is_active": {
            "type": "boolean",
            "example": true,
            "description": "Whether the integrator is active."
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "example": "2025-05-19T15:30:00.000Z",
            "description": "Timestamp when the integrator was created."
          },
          "updated_at": {
            "type": "object",
            "example": "2025-05-20T09:00:00.000Z",
            "description": "Timestamp when the integrator was last updated.",
            "nullable": true
          },
          "walletId": {
            "type": "string",
            "example": "wallet-abc123def456",
            "description": "Master wallet ID (created automatically with integrator)."
          },
          "apiKey": {
            "type": "string",
            "example": "sk_client_v1_a1b2c3d4e5f6...",
            "description": "Primary API key (returned only on creation)."
          },
          "primaryAddress": {
            "type": "string",
            "example": "0x1234567890abcdef1234567890abcdef12345678",
            "description": "Primary wallet address (first address of master wallet)."
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "IntegratorCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "AvaLabs",
            "description": "Name of the integrator."
          },
          "email": {
            "type": "string",
            "example": "john@example.com",
            "description": "Email address of the integrator."
          }
        },
        "required": [
          "name",
          "email"
        ]
      },
      "ApiResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "statusCode": {
            "type": "number"
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "message",
          "statusCode",
          "timestamp"
        ]
      },
      "WalletAddressDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Derived blockchain address",
            "example": "0x123abc456def789012345678901234567890abcd"
          },
          "path": {
            "type": "string",
            "description": "Path used for derivation",
            "example": "m/44'/60'/0'/0/0"
          },
          "addressFormat": {
            "type": "string",
            "description": "Address format",
            "enum": [
              "ADDRESS_FORMAT_ETHEREUM",
              "ADDRESS_FORMAT_COMPRESSED",
              "ADDRESS_FORMAT_SOLANA"
            ],
            "example": "ADDRESS_FORMAT_ETHEREUM"
          }
        },
        "required": [
          "address"
        ]
      },
      "WalletResponseDto": {
        "type": "object",
        "properties": {
          "walletId": {
            "type": "string",
            "description": "Turnkey wallet ID",
            "example": "wallet-abc123def456"
          },
          "walletName": {
            "type": "string",
            "description": "Wallet name",
            "example": "My Treasury Wallet"
          },
          "addresses": {
            "description": "Array of derived addresses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletAddressDto"
            }
          },
          "subOrganizationId": {
            "type": "string",
            "description": "Sub-organization ID where the wallet was created",
            "example": "suborg-xyz789"
          }
        },
        "required": [
          "walletId",
          "walletName",
          "addresses"
        ]
      },
      "WalletAccountDto": {
        "type": "object",
        "properties": {
          "curve": {
            "type": "string",
            "description": "Curve type for the cryptographic key",
            "enum": [
              "CURVE_SECP256K1",
              "CURVE_ED25519"
            ],
            "example": "CURVE_SECP256K1"
          },
          "pathFormat": {
            "type": "string",
            "description": "Path format for key derivation",
            "enum": [
              "PATH_FORMAT_BIP32",
              "PATH_FORMAT_SLIP10"
            ],
            "example": "PATH_FORMAT_BIP32"
          },
          "path": {
            "type": "string",
            "description": "Derivation path (e.g., \"m/44'/60'/0'/0/0\")",
            "example": "m/44'/60'/0'/0/0"
          },
          "addressFormat": {
            "type": "string",
            "description": "Address format for the derived address",
            "enum": [
              "ADDRESS_FORMAT_ETHEREUM",
              "ADDRESS_FORMAT_COMPRESSED",
              "ADDRESS_FORMAT_SOLANA"
            ],
            "example": "ADDRESS_FORMAT_ETHEREUM"
          }
        },
        "required": [
          "curve",
          "pathFormat",
          "path",
          "addressFormat"
        ]
      },
      "CreateWalletDto": {
        "type": "object",
        "properties": {
          "walletName": {
            "type": "string",
            "description": "Human-readable name for the wallet",
            "example": "My Treasury Wallet"
          },
          "accounts": {
            "description": "Array of account parameters to create in the wallet",
            "example": [
              {
                "curve": "CURVE_SECP256K1",
                "pathFormat": "PATH_FORMAT_BIP32",
                "path": "m/44'/60'/0'/0/0",
                "addressFormat": "ADDRESS_FORMAT_ETHEREUM"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletAccountDto"
            }
          },
          "addressFormats": {
            "type": "array",
            "description": "Array of address formats to create (simplified, auto-derives paths)",
            "example": [
              "ADDRESS_FORMAT_ETHEREUM",
              "ADDRESS_FORMAT_SOLANA"
            ],
            "items": {
              "type": "string",
              "enum": [
                "ADDRESS_FORMAT_ETHEREUM",
                "ADDRESS_FORMAT_COMPRESSED",
                "ADDRESS_FORMAT_SOLANA"
              ]
            }
          },
          "mnemonicLength": {
            "type": "number",
            "description": "Mnemonic length for the wallet seed phrase (12 or 24)",
            "example": 12,
            "minimum": 12,
            "maximum": 24
          }
        },
        "required": [
          "walletName"
        ]
      },
      "WalletListResponseDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "Array of wallets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletResponseDto"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor for pagination (if available)",
            "example": "cursor-abc123"
          }
        },
        "required": [
          "items"
        ]
      },
      "WalletAccountResponseDto": {
        "type": "object",
        "properties": {
          "walletAccountId": {
            "type": "string",
            "description": "Wallet account ID",
            "example": "account-abc123"
          },
          "walletId": {
            "type": "string",
            "description": "Wallet ID",
            "example": "wallet-abc123def456"
          },
          "address": {
            "type": "string",
            "description": "Derived address",
            "example": "0x123abc456def789012345678901234567890abcd"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key",
            "example": "0x..."
          }
        },
        "required": [
          "walletAccountId",
          "walletId",
          "address"
        ]
      },
      "CreateWalletAccountsDto": {
        "type": "object",
        "properties": {
          "accounts": {
            "description": "Array of account parameters to create",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletAccountDto"
            }
          },
          "addressFormats": {
            "type": "array",
            "description": "Array of address formats to create (simplified, auto-derives paths)",
            "example": [
              "ADDRESS_FORMAT_ETHEREUM"
            ],
            "items": {
              "type": "string",
              "enum": [
                "ADDRESS_FORMAT_ETHEREUM",
                "ADDRESS_FORMAT_COMPRESSED",
                "ADDRESS_FORMAT_SOLANA"
              ]
            }
          }
        }
      },
      "MiniAppResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "id_user": {
            "type": "object",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "wallet_address": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "contract_address": {
            "type": "object",
            "nullable": true
          },
          "type": {
            "type": "object",
            "nullable": true
          },
          "tx_hash": {
            "type": "object",
            "nullable": true
          },
          "blockchain_network": {
            "type": "number"
          },
          "blockchain_network_destination": {
            "type": "object",
            "nullable": true
          },
          "created_at": {
            "type": "object",
            "nullable": true
          },
          "updated_at": {
            "type": "object",
            "nullable": true
          },
          "is_active": {
            "type": "object",
            "nullable": true
          },
          "protocol": {
            "type": "object"
          },
          "source": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "id_user",
          "description",
          "wallet_address",
          "metadata",
          "contract_address",
          "type",
          "tx_hash",
          "blockchain_network",
          "blockchain_network_destination",
          "created_at",
          "updated_at",
          "is_active",
          "protocol",
          "source"
        ]
      },
      "MiniAppCreateDto": {
        "type": "object",
        "properties": {
          "id_user": {
            "type": "string",
            "description": "UUID of the user",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          },
          "description": {
            "type": "string",
            "description": "Description of the mini app",
            "example": "My awesome swap mini-app"
          },
          "wallet_address": {
            "type": "string",
            "description": "Wallet address",
            "example": "0x123abc456def789012345678901234567890abcd"
          },
          "metadata": {
            "type": "object",
            "description": "JSON metadata object",
            "example": {
              "name": "My Mini App",
              "version": "1.0.0",
              "settings": {
                "slippage": 0.5,
                "gas_limit": 300000
              }
            }
          },
          "contract_address": {
            "type": "string",
            "description": "Contract address",
            "example": "0x456def789abc012345678901234567890123cdef"
          },
          "type": {
            "type": "string",
            "description": "Type of the mini app",
            "enum": [
              "Swap",
              "Stake",
              "Transfer Native",
              "Tips",
              "Native Cross-Chain",
              "onboarding"
            ],
            "example": "Swap"
          },
          "protocol": {
            "type": "string",
            "description": "Protocol used for the mini app",
            "example": "traderjoe",
            "default": "traderjoe"
          },
          "tx_hash": {
            "type": "string",
            "description": "Transaction hash",
            "example": "0xabc123def456789abc123def456789abc123def456789abc123def456789abcd"
          },
          "blockchain_network": {
            "type": "number",
            "description": "Blockchain network ID (43114 for Avalanche mainnet)",
            "example": 43114
          },
          "blockchain_network_destination": {
            "type": "number",
            "description": "Destination blockchain network ID (for cross-chain operations)",
            "example": 1
          },
          "is_active": {
            "type": "boolean",
            "description": "Is the mini app active?",
            "example": true,
            "default": true
          },
          "twitter_handle": {
            "type": "string",
            "description": "Twitter handle (REQUIRED when type = \"onboarding\")",
            "example": "johndoe"
          },
          "id_x": {
            "type": "string",
            "description": "Twitter ID (REQUIRED when type = \"onboarding\")",
            "example": "123456789"
          }
        },
        "required": [
          "id_user",
          "description",
          "wallet_address",
          "metadata",
          "contract_address",
          "blockchain_network",
          "is_active"
        ]
      },
      "MiniAppUpdateDto": {
        "type": "object",
        "properties": {
          "id_user": {
            "type": "string",
            "description": "UUID of the user",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          },
          "description": {
            "type": "string",
            "description": "Description of the mini app",
            "example": "My updated awesome swap mini-app"
          },
          "wallet_address": {
            "type": "string",
            "description": "Wallet address",
            "example": "0x123abc456def789012345678901234567890abcd"
          },
          "metadata": {
            "type": "object",
            "description": "JSON metadata object",
            "example": {
              "name": "My Updated Mini App",
              "version": "1.1.0",
              "settings": {
                "slippage": 1,
                "gas_limit": 350000
              }
            }
          },
          "contract_address": {
            "type": "string",
            "description": "Contract address",
            "example": "0x456def789abc012345678901234567890123cdef"
          },
          "type": {
            "type": "string",
            "description": "Type of the mini app",
            "enum": [
              "Swap",
              "Stake",
              "Transfer Native",
              "Tips",
              "Native Cross-Chain",
              "onboarding"
            ],
            "example": "Swap"
          },
          "protocol": {
            "type": "string",
            "description": "Protocol used for the mini app",
            "example": "traderjoe"
          },
          "tx_hash": {
            "type": "string",
            "description": "Transaction hash",
            "example": "0xabc123def456789abc123def456789abc123def456789abc123def456789abcd"
          },
          "blockchain_network": {
            "type": "number",
            "description": "Blockchain network ID (43114 for Avalanche mainnet)",
            "example": 43114
          },
          "blockchain_network_destination": {
            "type": "number",
            "description": "Destination blockchain network ID (for cross-chain operations)",
            "example": 1
          },
          "is_active": {
            "type": "boolean",
            "description": "Is the mini app active?",
            "example": true
          },
          "twitter_handle": {
            "type": "string",
            "description": "Twitter handle",
            "example": "johndoe"
          },
          "id_x": {
            "type": "string",
            "description": "Twitter ID",
            "example": "123456789"
          }
        }
      },
      "FeesWithdrawalCreateDto": {
        "type": "object",
        "properties": {
          "id_user": {
            "type": "string",
            "description": "User ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "id_mini_app": {
            "type": "string",
            "description": "Mini app ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "amount": {
            "type": "number",
            "description": "Withdrawal amount",
            "example": 100.5
          },
          "blockchain_network": {
            "type": "number",
            "description": "Blockchain network ID",
            "example": 43114
          },
          "tx_hash": {
            "type": "string",
            "description": "Transaction hash",
            "example": "0x1234567890abcdef..."
          },
          "status": {
            "type": "string",
            "description": "Withdrawal status",
            "enum": [
              "pending",
              "completed",
              "failed"
            ],
            "example": "pending"
          }
        },
        "required": [
          "id_user",
          "id_mini_app",
          "amount",
          "blockchain_network",
          "tx_hash",
          "status"
        ]
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          }
        },
        "required": [
          "total",
          "page",
          "limit"
        ]
      },
      "ApiPaginatedResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "statusCode": {
            "type": "number"
          },
          "timestamp": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "required": [
          "success",
          "message",
          "statusCode",
          "timestamp",
          "pagination"
        ]
      },
      "ApplicationResponseDto": {
        "type": "object",
        "properties": {
          "id_application": {
            "type": "string",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "description": "Unique identifier for the application."
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "Name of the applicant."
          },
          "email": {
            "type": "string",
            "example": "john@example.com",
            "description": "Email address of the applicant."
          },
          "telegram": {
            "type": "object",
            "example": "@johndoe",
            "description": "Telegram handle of the applicant.",
            "nullable": true
          },
          "twitter": {
            "type": "object",
            "example": "@johndoe",
            "description": "Twitter handle of the applicant.",
            "nullable": true
          },
          "project_name": {
            "type": "string",
            "example": "SuperProject",
            "description": "Name of the project."
          },
          "explanation": {
            "type": "string",
            "example": "A project that changes the world.",
            "description": "Explanation or pitch of the project."
          },
          "api_url": {
            "type": "string",
            "example": "https://api.superproject.io",
            "description": "Public API URL of the project."
          },
          "state": {
            "type": "string",
            "example": "pending",
            "description": "Application state",
            "enum": [
              "pending",
              "review",
              "approved",
              "rejected"
            ]
          },
          "created_at": {
            "type": "object",
            "example": "2025-05-18T15:22:10.000Z",
            "description": "Date the application was created.",
            "nullable": true
          }
        },
        "required": [
          "id_application",
          "name",
          "email",
          "telegram",
          "twitter",
          "project_name",
          "explanation",
          "api_url",
          "state",
          "created_at"
        ]
      },
      "ApplicationCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "Name of the applicant."
          },
          "email": {
            "type": "string",
            "example": "john@example.com",
            "description": "Email address of the applicant."
          },
          "telegram": {
            "type": "string",
            "example": "@johndoe",
            "description": "Telegram handle of the applicant."
          },
          "twitter": {
            "type": "string",
            "example": "@johndoe",
            "description": "Twitter handle of the applicant."
          },
          "project_name": {
            "type": "string",
            "example": "SuperProject",
            "description": "Name of the project."
          },
          "explanation": {
            "type": "string",
            "example": "A project that changes the world.",
            "description": "Explanation or pitch of the project."
          },
          "api_url": {
            "type": "string",
            "example": "https://api.superproject.io",
            "description": "Public API URL of the project."
          }
        },
        "required": [
          "name",
          "email",
          "telegram",
          "twitter",
          "project_name",
          "explanation",
          "api_url"
        ]
      },
      "SwapProtocol": {
        "type": "string",
        "enum": [
          "lfj",
          "pangolin",
          "arenaswap"
        ]
      },
      "KolMetricsResponseDto": {
        "type": "object",
        "properties": {
          "triggerIds": {
            "description": "Array of trigger IDs that were searched",
            "example": [
              "84e6d016-d4c5-4869-8ffa-e9b48f4e6d96"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stats": {
            "description": "Statistics for each event type",
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "totalEvents": {
            "type": "number",
            "description": "Total number of events found",
            "example": 42,
            "minimum": 0
          },
          "events": {
            "description": "Array of individual events with detailed information",
            "items": {
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "triggerIds",
          "stats",
          "totalEvents",
          "events"
        ]
      },
      "TimeRange": {
        "type": "string",
        "enum": [
          "24h",
          "7d",
          "30d",
          "all"
        ]
      },
      "SwapDetailDto": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "Token contract address"
          },
          "amountIn": {
            "type": "string",
            "description": "Raw amount of tokens involved in the swap"
          },
          "feeUsd": {
            "type": "number",
            "description": "Fee amount in USD"
          },
          "volumeUsd": {
            "type": "number",
            "description": "Volume amount in USD"
          },
          "transactionHash": {
            "type": "string",
            "description": "Transaction hash"
          },
          "timestamp": {
            "type": "number",
            "description": "Block timestamp"
          },
          "logId": {
            "type": "string",
            "description": "Event index in the transaction log"
          },
          "priceFound": {
            "type": "boolean",
            "description": "Whether price was found for this token"
          }
        },
        "required": [
          "tokenAddress",
          "amountIn",
          "feeUsd",
          "volumeUsd",
          "transactionHash",
          "timestamp",
          "logId",
          "priceFound"
        ]
      },
      "PostHogEventStatsDto": {
        "type": "object",
        "properties": {
          "event_type": {
            "type": "string",
            "description": "Type of event",
            "example": "trigger_action_executed"
          },
          "count": {
            "type": "number",
            "description": "Number of occurrences in current period",
            "example": 25
          },
          "previous_count": {
            "type": "number",
            "description": "Number of occurrences in previous period",
            "example": 15
          },
          "performance": {
            "type": "string",
            "description": "Performance percentage change",
            "example": "66.67"
          }
        },
        "required": [
          "event_type",
          "count",
          "previous_count",
          "performance"
        ]
      },
      "OnchainStatsDto": {
        "type": "object",
        "properties": {
          "volume": {
            "type": "number",
            "description": "Swap volume"
          },
          "fees": {
            "type": "number",
            "description": "Fees colected from the swaps"
          },
          "swaps": {
            "description": "Detailed swap information",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwapDetailDto"
            }
          },
          "tokensWithoutPrice": {
            "description": "Token addresses that could not be priced",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "postHogStats": {
            "description": "PostHog event statistics for this mini app",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostHogEventStatsDto"
            }
          }
        },
        "required": [
          "volume",
          "fees"
        ]
      },
      "MiniAppWithMetricsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "id_user": {
            "type": "object",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "wallet_address": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "contract_address": {
            "type": "object",
            "nullable": true
          },
          "type": {
            "type": "object",
            "nullable": true
          },
          "tx_hash": {
            "type": "object",
            "nullable": true
          },
          "blockchain_network": {
            "type": "number"
          },
          "blockchain_network_destination": {
            "type": "object",
            "nullable": true
          },
          "created_at": {
            "type": "object",
            "nullable": true
          },
          "updated_at": {
            "type": "object",
            "nullable": true
          },
          "is_active": {
            "type": "object",
            "nullable": true
          },
          "protocol": {
            "type": "object"
          },
          "source": {
            "type": "object"
          },
          "stats": {
            "description": "Mini app onchain metrics",
            "allOf": [
              {
                "$ref": "#/components/schemas/OnchainStatsDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "id_user",
          "description",
          "wallet_address",
          "metadata",
          "contract_address",
          "type",
          "tx_hash",
          "blockchain_network",
          "blockchain_network_destination",
          "created_at",
          "updated_at",
          "is_active",
          "protocol",
          "source",
          "stats"
        ]
      },
      "OnchainGlobalStatsDto": {
        "type": "object",
        "properties": {
          "volume": {
            "type": "number",
            "description": "Global swap volume"
          },
          "fees": {
            "type": "number",
            "description": "Global fees colected from all the swaps"
          }
        },
        "required": [
          "volume",
          "fees"
        ]
      },
      "KolOnchainMetricsResponseDto": {
        "type": "object",
        "properties": {
          "miniApps": {
            "description": "Array of mini apps that were searched",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MiniAppWithMetricsResponseDto"
            }
          },
          "globalStats": {
            "description": "Global onchain metrics for the KOL",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnchainGlobalStatsDto"
            }
          }
        },
        "required": [
          "miniApps",
          "globalStats"
        ]
      },
      "UserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "description": "Unique identifier for the user (UUID)."
          },
          "username": {
            "type": "string",
            "example": "john_doe",
            "description": "Unique username of the user."
          },
          "id_x": {
            "type": "object",
            "example": 12345678,
            "description": "Unique X / Ttwitter ID of the user.",
            "nullable": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "example": "2024-05-12T13:47:00.000Z",
            "description": "Timestamp of user creation."
          },
          "updated_at": {
            "type": "object",
            "example": "2024-05-13T10:00:00.000Z",
            "description": "Timestamp of last update (if any).",
            "nullable": true
          },
          "address": {
            "type": "string",
            "example": "0x123abc456def789012345678901234567890abcd",
            "description": "Ethereum wallet address of the user."
          },
          "privy_id": {
            "type": "object",
            "example": "privy-did:123abc456def789012345678901234567890abcd",
            "description": "Privy unique identifier.",
            "nullable": true
          },
          "privy_address": {
            "type": "object",
            "example": "0x456def789012345678901234567890abcdef123",
            "description": "Privy wallet address.",
            "nullable": true
          },
          "thirdweb_address": {
            "type": "object",
            "example": "0x789abc012345678901234567890abcdef123456",
            "description": "Original ThirdWeb wallet address (backup).",
            "nullable": true
          }
        },
        "required": [
          "id",
          "username",
          "id_x",
          "created_at",
          "updated_at",
          "address",
          "privy_id",
          "privy_address",
          "thirdweb_address"
        ]
      },
      "UserFindOrCreateDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "john_doe",
            "description": "Twitter username (obligatorio)",
            "maxLength": 50
          },
          "address": {
            "type": "string",
            "example": "0x123abc456def789012345678901234567890abcd",
            "description": "Ethereum wallet address (obligatorio, único)",
            "maxLength": 42
          },
          "id_x": {
            "type": "number",
            "example": 1234567890,
            "description": "Unique identifier for the user"
          },
          "privy_id": {
            "type": "string",
            "example": "did:privy:cmflfuqfy004xla0cbguzvtmw",
            "description": "Privy unique identifier"
          },
          "privy_address": {
            "type": "string",
            "example": "0x456def789012345678901234567890abcdef123",
            "description": "Privy wallet address",
            "maxLength": 42
          }
        },
        "required": [
          "username",
          "address"
        ]
      },
      "UserOnboardedDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "description": "Unique identifier for the user onboarded (UUID)."
          },
          "id_mini_app_onboarding": {
            "type": "object",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "description": "ID of the mini app with which the user was onboarded."
          },
          "twitter_handle": {
            "type": "object",
            "example": "gilbertsahumada",
            "description": "Twitter handle of the user onboarded that was sent to the mini-app. sent by by the webhook",
            "nullable": true
          },
          "id_mini_app": {
            "type": "object",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "description": "ID of the mini app created by the user, can be null if not created. In case user creates a mini app to onboard, this will be the ID of that mini app.",
            "nullable": true
          },
          "id_user": {
            "type": "object",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "description": "ID of the user onboarded, can be null if not yet created.",
            "nullable": true
          },
          "id_x": {
            "type": "object",
            "example": 12345678,
            "description": "Unique X / Twitter ID of the user onboarded.",
            "nullable": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "example": "2024-05-12T13:47:00.000Z",
            "description": "Timestamp of user onboarding."
          },
          "updated_at": {
            "type": "object",
            "example": "2024-05-13T10:00:00.000Z",
            "description": "Timestamp of last update (if any).",
            "nullable": true
          }
        },
        "required": [
          "id",
          "id_mini_app_onboarding",
          "created_at"
        ]
      },
      "UserFindOrCreateResponseDto": {
        "type": "object",
        "properties": {
          "user": {
            "description": "User data",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponseDto"
              }
            ]
          },
          "user_onboarded": {
            "description": "User onboarded data if available, null otherwise",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserOnboardedDto"
              }
            ]
          },
          "created": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the user was created (true) or already existed (false)"
          },
          "on_whitelist": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the user is on the whitelist"
          },
          "disabled": {
            "type": "object",
            "example": false,
            "description": "Indicates if the user is disabled on the whitelist",
            "nullable": true
          },
          "onboarded": {
            "type": "object",
            "example": true,
            "description": "Indicates if the user is onboarded",
            "nullable": true
          },
          "users_onboarded": {
            "type": "object",
            "example": 100,
            "description": "Number of users onboarded by this user",
            "nullable": true
          }
        },
        "required": [
          "user",
          "user_onboarded",
          "created",
          "disabled",
          "onboarded",
          "users_onboarded"
        ]
      },
      "UserCreateDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "fallback_user_123abc",
            "description": "Unique username for the user.",
            "maxLength": 50
          },
          "address": {
            "type": "string",
            "example": "0x123abc456def789012345678901234567890abcd",
            "description": "Ethereum wallet address",
            "maxLength": 42
          },
          "email": {
            "type": "string",
            "example": "john@example.com",
            "description": "Email address of the user (optional)."
          }
        },
        "required": [
          "username",
          "address"
        ]
      },
      "TokenBalanceDto": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "Token contract address (0x0 for native token)",
            "example": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
          },
          "balance": {
            "type": "string",
            "description": "Token balance in wei/smallest unit",
            "example": "1500000000000000000"
          },
          "balanceFormatted": {
            "type": "string",
            "description": "Token balance formatted (18 decimals)",
            "example": "1.5"
          },
          "symbol": {
            "type": "string",
            "description": "Token symbol (if available)",
            "example": "USDC"
          }
        },
        "required": [
          "tokenAddress",
          "balance",
          "balanceFormatted"
        ]
      },
      "KolFeeBalanceDto": {
        "type": "object",
        "properties": {
          "miniAppId": {
            "type": "string",
            "description": "Mini app unique identifier",
            "example": "uuid-here"
          },
          "contractAddress": {
            "type": "string",
            "description": "Contract address of the mini app",
            "example": "0x123abc456def789012345678901234567890abcd"
          },
          "miniAppType": {
            "type": "string",
            "description": "Mini app type",
            "example": "swap"
          },
          "chainName": {
            "type": "string",
            "description": "Blockchain network name",
            "example": "Avalanche"
          },
          "chainId": {
            "type": "number",
            "description": "Blockchain network ID",
            "example": 43114
          },
          "balances": {
            "description": "Array of token balances",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenBalanceDto"
            }
          },
          "success": {
            "type": "boolean",
            "description": "Whether the contract call was successful",
            "example": true
          },
          "error": {
            "type": "string",
            "description": "Error message if call failed",
            "example": "Contract call failed"
          }
        },
        "required": [
          "miniAppId",
          "contractAddress",
          "miniAppType",
          "chainName",
          "chainId",
          "balances",
          "success"
        ]
      },
      "KolFeeBalancesResponseDto": {
        "type": "object",
        "properties": {
          "kolAddress": {
            "type": "string",
            "description": "KOL wallet address",
            "example": "0x123abc456def789012345678901234567890abcd"
          },
          "totalMiniApps": {
            "type": "number",
            "description": "Total number of mini apps for this KOL",
            "example": 5
          },
          "successfulCalls": {
            "type": "number",
            "description": "Number of successful contract calls",
            "example": 4
          },
          "failedCalls": {
            "type": "number",
            "description": "Number of failed contract calls",
            "example": 1
          },
          "feeBalances": {
            "description": "Fee balance details for each mini app",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KolFeeBalanceDto"
            }
          }
        },
        "required": [
          "kolAddress",
          "totalMiniApps",
          "successfulCalls",
          "failedCalls",
          "feeBalances"
        ]
      },
      "WebhookPayloadDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data of the event or transaction.",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "timestamp": {
            "type": "number",
            "example": 1754920748,
            "description": "Timestamp of when the payload was sent in seconds."
          },
          "topic": {
            "type": "string",
            "example": "v1.events",
            "description": "Topic of the data."
          }
        },
        "required": [
          "data",
          "timestamp",
          "topic"
        ]
      },
      "EventsResponseDto": {
        "type": "object",
        "properties": {
          "processed": {
            "type": "number",
            "description": "Total number of events processed",
            "example": 3
          }
        },
        "required": [
          "processed"
        ]
      },
      "SwapMetadataDto": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol name",
            "example": "lfj"
          },
          "chainName": {
            "type": "string",
            "description": "Blockchain name",
            "example": "avalanche"
          },
          "fromToken": {
            "type": "string",
            "description": "Input token",
            "example": "AVAX"
          },
          "toToken": {
            "type": "string",
            "description": "Output token",
            "example": "JOE"
          },
          "routerAddress": {
            "type": "string",
            "description": "KOL Router contract address",
            "example": "0x123abc456def789012345678901234567890abcd"
          },
          "slippageTolerance": {
            "type": "number",
            "description": "Slippage tolerance (percentage)",
            "example": 0.5
          }
        },
        "required": [
          "protocol",
          "chainName",
          "fromToken",
          "toToken",
          "routerAddress",
          "slippageTolerance"
        ]
      },
      "CrossChainAppDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the Application"
          },
          "description": {
            "type": "string",
            "description": "The description of the Application"
          },
          "icon": {
            "type": "string",
            "description": "The icon URL of the Application"
          },
          "url": {
            "type": "string",
            "description": "The URL of the Application"
          },
          "sourceChainId": {
            "type": "number",
            "description": "The source chain ID for the cross-chain transfer"
          },
          "destinationChainId": {
            "type": "number",
            "description": "The destination chain ID for the cross-chain transfer"
          },
          "address": {
            "type": "string",
            "description": "The recipient address for the cross-chain transfer"
          }
        },
        "required": [
          "title",
          "description",
          "url",
          "sourceChainId",
          "destinationChainId",
          "address"
        ]
      },
      "TransferMetadataDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The name of the blockchain network (e.g., ethereum, polygon)."
          },
          "description": {
            "type": "string",
            "description": "The name of the blockchain network (e.g., ethereum, polygon)."
          },
          "icon": {
            "type": "string",
            "description": "The Twitter handle of the recipient (without @)."
          },
          "url": {
            "type": "string",
            "description": "The name of the blockchain network (e.g., ethereum, polygon)."
          },
          "address": {
            "type": "string",
            "description": "The name of the blockchain network (e.g., ethereum, polygon)."
          },
          "chainId": {
            "type": "number",
            "description": "The name of the blockchain network (e.g., ethereum, polygon)."
          }
        },
        "required": [
          "title",
          "description",
          "url",
          "address",
          "chainId"
        ]
      },
      "SimpleReserveDataDto": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "example": "USDC"
          },
          "name": {
            "type": "string",
            "example": "USD Coin"
          },
          "tokenAddress": {
            "type": "string",
            "example": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
          },
          "supplyApy": {
            "type": "string",
            "example": "0.0523"
          },
          "supplyApyFormatted": {
            "type": "string",
            "example": "5.23%"
          },
          "userBalance": {
            "type": "string",
            "example": "1000.50"
          },
          "userBalanceUsd": {
            "type": "string",
            "example": "1000.50"
          },
          "suppliableAmount": {
            "type": "string",
            "example": "1000.50"
          },
          "suppliableAmountUsd": {
            "type": "string",
            "example": "1000.50"
          },
          "borrowableAmount": {
            "type": "string",
            "example": "800.40"
          },
          "borrowableAmountUsd": {
            "type": "string",
            "example": "800.40"
          },
          "usdExchangeRate": {
            "type": "string",
            "example": "1.00"
          },
          "canBeCollateral": {
            "type": "boolean",
            "example": true
          },
          "canBeBorrowed": {
            "type": "boolean",
            "example": true
          },
          "isInIsolationMode": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "symbol",
          "name",
          "tokenAddress",
          "supplyApy",
          "supplyApyFormatted",
          "userBalance",
          "userBalanceUsd",
          "suppliableAmount",
          "suppliableAmountUsd",
          "borrowableAmount",
          "borrowableAmountUsd",
          "usdExchangeRate",
          "canBeCollateral",
          "canBeBorrowed",
          "isInIsolationMode"
        ]
      },
      "MarketsDataResponseDto": {
        "type": "object",
        "properties": {
          "userState": {
            "type": "object",
            "description": "User state data if userAddress was provided"
          },
          "supplyReserves": {
            "description": "List of available supply reserves with market data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleReserveDataDto"
            }
          },
          "allMarketsData": {
            "description": "All markets raw data from AAVE",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "supplyReserves"
        ]
      },
      "DefiErrorResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "object",
            "example": {
              "code": "AAVE_API_ERROR",
              "message": "Failed to fetch market data",
              "details": {}
            }
          },
          "timestamp": {
            "type": "number",
            "example": 1698765432000
          }
        },
        "required": [
          "success",
          "error",
          "timestamp"
        ]
      },
      "SupplyRequestDto": {
        "type": "object",
        "properties": {
          "userAddress": {
            "type": "string",
            "description": "User wallet address",
            "example": "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb"
          },
          "tokenAddress": {
            "type": "string",
            "description": "Token address to supply",
            "example": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
          },
          "amount": {
            "type": "string",
            "description": "Amount to supply in token units (wei for ETH-like tokens)",
            "example": "1000000000000000000"
          },
          "chainId": {
            "type": "number",
            "description": "Chain ID for the network",
            "example": 43114,
            "enum": [
              43114,
              43113
            ]
          }
        },
        "required": [
          "userAddress",
          "tokenAddress",
          "amount",
          "chainId"
        ]
      },
      "SupplyResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "transactionHash": {
            "type": "string",
            "example": "0x1234567890abcdef...",
            "description": "Transaction hash"
          },
          "message": {
            "type": "string",
            "example": "Transaction serialized and ready to be signed",
            "description": "Status message"
          },
          "serializedTransaction": {
            "type": "string",
            "description": "Serialized transaction data"
          },
          "gasEstimation": {
            "type": "object",
            "description": "Gas estimation data"
          }
        },
        "required": [
          "success",
          "transactionHash",
          "message",
          "serializedTransaction",
          "gasEstimation"
        ]
      }
    }
  },
  "security": [
    {
      "api-key": []
    }
  ]
}